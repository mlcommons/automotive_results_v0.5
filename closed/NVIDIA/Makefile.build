# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	 http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This Makefile contains all the variable and targets related to building the binaries for NVIDIA's MLPerf Inference
# submission. This includes TensorRT plugins, C++ harness binaries.

ifndef MAKEFILE_BUILD_INCLUDED
MAKEFILE_BUILD_INCLUDED := 1

include $(CURDIR)/Makefile.const

# Specify debug options for build (default to Release build)
ifeq ($(DEBUG),1)
	BUILD_TYPE := Debug
else
	BUILD_TYPE := Release
endif

# Set the include directory for Loadgen header files
AUTOMOTIVE_DIR = $(BUILD_DIR)/automotive
AUTOMOTIVE_URL = https://github.com/mlcommons/mlperf_automotive.git
LOADGEN_INCLUDE_DIR ?= $(AUTOMOTIVE_DIR)/loadgen
LOADGEN_LIB_DIR ?= $(LOADGEN_INCLUDE_DIR)/build
# hash on 07/03/2025 - final version for v0.5
AUTOMOTIVE_HASH = 12ca086242d20d88f268fec32f77d57a942282f2

# Set Environment variables to extracted contents
export LD_LIBRARY_PATH := $(LD_LIBRARY_PATH):/usr/local/cuda/lib64:/usr/lib/$(ARCH)-linux-gnu:$(LOADGEN_LIB_DIR)
export HARNESS_LD_LIBRARY_PATH := $(LD_LIBRARY_PATH)	# LD_LIBRARY_PATH used during run_harness
export LIBRARY_PATH := /usr/local/cuda/lib64:/usr/lib/$(ARCH)-linux-gnu:$(LOADGEN_LIB_DIR):$(LIBRARY_PATH)
export PATH := /usr/local/cuda/bin:$(PATH)
export CPATH := /usr/local/cuda/include:/usr/include/$(ARCH)-linux-gnu:/usr/include/$(ARCH)-linux-gnu/cub:$(CPATH)
export CUDA_PATH := /usr/local/cuda
export CCACHE_DISABLE=1

# Set CUDA_DEVICE_MAX_CONNECTIONS to increase multiple stream performance; likely not necessary for automotive so leaving it as default (8)
# export CUDA_DEVICE_MAX_CONNECTIONS := 32


# FFI Utils for Python
FFI_UTILS_DIR := $(BUILD_DIR)/harness/lib


# mitten hash:
MITTEN_PUBLIC_HASH := 5a9b1d7f28a159bd3ea9831e18b391b95b880edf
MITTEN_DEV_HASH := 5a9b1d7f28a159bd3ea9831e18b391b95b880edf


TRT_INCLUDE_DIR = /usr/include/$(ARCH)-linux-gnu/


# Build flags
HARNESS_BUILD_FLAGS := -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
                       -DLOADGEN_INCLUDE_DIR=$(LOADGEN_INCLUDE_DIR) \
                       -DLOADGEN_LIB_DIR=$(LOADGEN_LIB_DIR) \
                       -DFFI_UTILS_DIR=$(FFI_UTILS_DIR) \
                       -DBUILD_TRTLLM=$(BUILD_TRTLLM) \
                       -DTRTLLM_DIR=$(TRTLLM_DIR) \
                       -DUSE_RELEASE_TRTLLM=$(USE_RELEASE_TRTLLM) \
                       -DTRT_MAJOR_VER=$(TRT_MAJOR_VER) \
                       -DCMAKE_EXPORT_COMPILE_COMMANDS=ON


PLUGINS := 
PLUGIN_TARGETS := $(addprefix plugin., $(PLUGINS))


# Add symbolic links to scratch path if it exists.
.PHONY: link_dirs
link_dirs:
	@mkdir -p build
	@mkdir -p $(DATA_DIR)
	@mkdir -p $(PREPROCESSED_DATA_DIR)
	@mkdir -p $(MODEL_DIR)
	@ln -sfn $(DATA_DIR) $(DATA_DIR_LINK)
	@ln -sfn $(PREPROCESSED_DATA_DIR) $(PREPROCESSED_DATA_DIR_LINK)
	@ln -sfn $(MODEL_DIR) $(MODEL_DIR_LINK)


# Build all source codes.
.PHONY: build
build: clone_loadgen link_dirs
	@$(MAKE) -f Makefile.build build_plugins
	@$(MAKE) -f Makefile.build build_and_install_loadgen
	@$(MAKE) -f Makefile.build build_harness

# Clone LoadGen repo.
.PHONY: clone_loadgen
clone_loadgen:
	# fatal: detected dubious ownership in repository at '/work/build/automotive'
	# likley happening due to docker running in root when sshfs is used to mount the dir
	git config --global --add safe.directory $(AUTOMOTIVE_DIR)
	@if [ ! -d $(LOADGEN_INCLUDE_DIR) ]; then \
		echo "Cloning Official MLPerf Automotive containing LoadGen" \
			&& git clone $(AUTOMOTIVE_URL) $(AUTOMOTIVE_DIR); \
	fi
	@echo "Updating Loadgen" \
		&& cd $(AUTOMOTIVE_DIR) \
		&& git fetch \
		&& git checkout $(AUTOMOTIVE_HASH)


# Handle TensorRT plugins.
.PHONY: build_plugins
build_plugins: build_plugins_from_src copy_plugins

# Build TensorRT plugins.
.PHONY: build_plugins_from_src
build_plugins_from_src: $(PLUGIN_TARGETS)

.PHONY: $(PLUGIN_TARGETS)
$(PLUGIN_TARGETS): plugin.%: code/plugin/%
	mkdir -p build/plugins/$(<F)
	cd build/plugins/$(<F)\
		&& cmake -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) $(PROJECT_ROOT)/code/plugin/$(<F) \
		&& make -j

# Copy prebuilt TensorRT plugins.
copy_plugins:
	@echo "Copying BEVFormer plugin..." && \
	mkdir -p build/plugins/BevFormerPlugin && \
	cp -f code/bevformer/tensorrt/libbev_plugins.so build/plugins/BevFormerPlugin/libbev_plugins.so && \
	echo "Done"

# Build LoadGen.
.PHONY: build_loadgen
build_loadgen:
	@echo "Building loadgen..."
	@if [ ! -e $(LOADGEN_LIB_DIR) ]; then \
		mkdir -p $(LOADGEN_LIB_DIR); \
	fi
	@if ls $(LOADGEN_INCLUDE_DIR)/mlcommons_*.whl 1> /dev/null 2>&1; then \
		echo "Cleaning up old wheels...." \
		&& rm $(LOADGEN_INCLUDE_DIR)/mlcommons_*.whl; \
	fi
	@cd $(LOADGEN_LIB_DIR) \
		&& cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) .. \
		&& make -j

# Install LoadGen.
install_loadgen:
	@echo "Installing loadgen..."
	@cd $(LOADGEN_INCLUDE_DIR) \
		&& CFLAGS="-std=c++14 -O3" pip wheel . \
		&& pip install --user --force-reinstall mlcommons_loadgen*.whl


# Build and install LoadGen.
.PHONY: build_and_install_loadgen
build_and_install_loadgen: build_loadgen install_loadgen

# Build harness source codes.
.PHONY: build_harness
build_harness:
	@echo "Building harness..."
	@mkdir -p build/harness \
		&& cd build/harness \
		&& cmake -DPYTHON3_CMD=$(PYTHON3_CMD) $(HARNESS_BUILD_FLAGS) $(PROJECT_ROOT)/code/harness \
		&& make -j
	@echo "Finished building harness."


# Set proper OC threshold for Jetson submissions
.PHONY: apply_soc_oc_limit
apply_soc_oc_limit:
ifeq ($(IS_SOC), 1)
	@sudo cp ./scripts/nvpower_r353_maxp.sh /etc/systemd/nvpower.sh
	@echo "Apply Jetson OC Limit Success."
endif

endif # ifndef MAKEFILE_BUILD_INCLUDED
